package net.paulhertz.pixelaudio;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.List;
import java.util.Random;

public class RandomContinousGen extends PixelMapGen {
	public final static String description = "RandomContinousGen starts at (0,0) makes random choices of the next pixels until it creates a continous path.";


	public RandomContinousGen(int width, int height, AffineTransformType type) {
		super(width, height, type);
		this.generate();
	}

	public RandomContinousGen(int width, int height) {
		super(width, height);
		this.generate();
	}

	@Override
	public String describe() {
		return RandomContinousGen.description;
	}

	@Override
	public boolean validate(int width, int height) {
		if (width < 2 || height < 2) {
			System.out.println("Width and height for BoustropheGen must be greater than 1.");
			return false;
		}
		return true;
	}

	/**
	 * Initializes this.coords, this.pixelMap, this.sampleMap: this is handled by 
	 * a call to PixelMapGen's setMapsFromCoords() method. 
	 * @return  this.pixelMap, the value for PixelAudioMapper.signalToImageLUT.
	 */
	@Override
	public int[] generate() {
		this.coords = this.generateCoordinates();
		return this.setMapsFromCoords(this.coords);
	}
	
	/**
	 * Generically-named method that calls the custom coordinate generation method for a particular 
	 * PixelMapGen child class. Here the method is generateBouCoordinates().
	 * Additional initializations belong here, if required by your coordinate generation method,
	 * rather than in the generate() method.
	 *
	 * @return 	An ArrayList<int[]> of bitmap coordinates in the order the signal mapping would visit them.
	 *
	 */
	private ArrayList<int[]> generateCoordinates() {
		return this.generateHamiltonianPath(this.w, this.h, 10000);
	}
	
	/**
	 * Generated by ChatGPT, not quite a solution to a non-trivial problem. 
	 * 
	 * 
	 * ChatGPT: 
	 * "
	 * Thanks for the clarification â€” and you're absolutely right: generating a truly continuous, 
	 * non-repeating, 4-connected path that visits every pixel exactly once is a classic problem. 
	 * What you're asking for is essentially a Hamiltonian path over a grid graph, restricted to 4-connected neighbors.
	 * 
	 * Requirements Recap:
	 *   Starts at (0, 0)
	 *   Visits every pixel exactly once
	 *   Moves only up/down/left/right (4-connected)
	 *   Never repeats, never jumps
	 *   Has some randomness in the generated path
	 * " 
	 * 
	 * This is an NP-Complete computational problem: 
	 * https://www.researchgate.net/publication/220616693_Hamilton_Paths_in_Grid_Graphs
	 * 
	 * @param width
	 * @param height
	 * @return
	 */
	private ArrayList<int[]> generateHamiltonianPath(int width, int height, int limit) {
	    int tries = 0;
	    int endX = width - 1;
	    int endY = 0;
	    while (tries < limit) {
	        ArrayList<int[]> path = new ArrayList<>(width * height);
	        boolean[][] visited = new boolean[height][width];
	        if (backtrackWarnsdorffWithFixedEnd(0, 0, width, height, visited, path, endX, endY)) {
	            return path;
	        }
	        tries++;
	    }
	    // Fallback: discontinuous but complete traversal
	    System.out.println("--->> Hamiltonian path calculation failed over "+ limit +" tries.");
	    return generateRandomContinuousCoordinates(width, height);
	}

	private boolean backtrackWarnsdorffWithFixedEnd(int x, int y, int width, int height,
	                                                boolean[][] visited, ArrayList<int[]> path,
	                                                int endX, int endY) {
	    visited[y][x] = true;
	    path.add(new int[]{x, y});

	    if (path.size() == width * height) {
	        // Must end at the desired endpoint
	        return (x == endX && y == endY);
	    }

	    List<int[]> neighbors = getUnvisitedNeighborsSortedByFewestOptions(x, y, visited, width, height);

	    for (int[] neighbor : neighbors) {
	        int nx = neighbor[0], ny = neighbor[1];
	        if (backtrackWarnsdorffWithFixedEnd(nx, ny, width, height, visited, path, endX, endY)) {
	            return true;
	        }
	    }

	    // Backtrack
	    visited[y][x] = false;
	    path.remove(path.size() - 1);
	    return false;
	}

	private List<int[]> getUnvisitedNeighborsSortedByFewestOptions(int x, int y,
	                                                               boolean[][] visited,
	                                                               int width, int height) {
	    int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
	    List<int[]> neighbors = new ArrayList<>();

	    for (int[] d : directions) {
	        int nx = x + d[0];
	        int ny = y + d[1];
	        if (nx >= 0 && ny >= 0 && nx < width && ny < height && !visited[ny][nx]) {
	            neighbors.add(new int[]{nx, ny});
	        }
	    }

	    neighbors.sort(Comparator.comparingInt(n -> countUnvisitedNeighbors(n[0], n[1], visited, width, height)));
	    return neighbors;
	}

	private int countUnvisitedNeighbors(int x, int y, boolean[][] visited, int width, int height) {
	    int count = 0;
	    int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
	    for (int[] d : directions) {
	        int nx = x + d[0];
	        int ny = y + d[1];
	        if (nx >= 0 && ny >= 0 && nx < width && ny < height && !visited[ny][nx]) {
	            count++;
	        }
	    }
	    return count;
	}

	
	private ArrayList<int[]> generateRandomContinuousCoordinates(int width, int height) {
	    ArrayList<int[]> path = new ArrayList<>(width * height);
	    boolean[][] visited = new boolean[height][width];
	    Random rand = new Random(System.nanoTime());

	    // 4-connected directions
	    int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

	    // Stack holds the path we're building
	    Deque<int[]> stack = new ArrayDeque<>();
	    stack.push(new int[]{0, 0});
	    visited[0][0] = true;
	    path.add(new int[]{0, 0});

	    while (!stack.isEmpty()) {
	        int[] current = stack.peek();
	        int cx = current[0];
	        int cy = current[1];

	        // Collect unvisited 4-connected neighbors
	        List<int[]> neighbors = new ArrayList<>();
	        for (int[] dir : directions) {
	            int nx = cx + dir[0];
	            int ny = cy + dir[1];
	            if (nx >= 0 && ny >= 0 && nx < width && ny < height && !visited[ny][nx]) {
	                neighbors.add(new int[]{nx, ny});
	            }
	        }

	        if (neighbors.isEmpty()) {
	            // No unvisited neighbors, backtrack
	            stack.pop();
	            continue;
	        }

	        // Pick a random unvisited neighbor
	        int[] next = neighbors.get(rand.nextInt(neighbors.size()));
	        visited[next[1]][next[0]] = true;
	        stack.push(next);
	        path.add(next);
	    }

	    return path;
	}

}
